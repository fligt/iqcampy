[
  {
    "objectID": "absorbance.html",
    "href": "absorbance.html",
    "title": "From reflectance to absorbance",
    "section": "",
    "text": "The color physics of a transparent (i.e. non-scattering) dye layer on paper is described by its spectral transmission \\(T = I / I_{0}\\) Given the transmission of a colored layer of unit thickness, we can compute the transmission of multiple layers by simply multiplying their transmission spectra! For example, if the amount of light at a certain wavelength is halved to 50% by a single layer, then adding a second layer will reduce the amount of transmitted light to 25%.\n\n\n\nMultiplying transmissions\n\n\nIn mathematical terms this behavior is described by the Lambert-Beer law. This exponential equation relates the spectral transmission \\(T_n\\) of stack of colored sheets to the spectral absorption coefficient \\(K_1\\) of a single layer and the thickness \\(n\\) of the stack.\n\\[ T_n = \\frac{I}{I_0}= e^{-n K_{1}}\\]\nThis equation can be rewritten to calculate the absorbance spectrum \\(A\\) for a given dye patch from the spectral reflectance \\(R\\) of a dye patch and the spectral reflectance of the white paper background \\(R_g\\).\n\\[ A = nK_1 = -\\ln{\\frac{I}{I_0}} = -\\ln{\\frac{R}{R_g}}\\]\nConversion of reflectance spectra into absorbance spectra greatly simplifies calculations, because their shape only determined by the dye and is independent of concentration or thickness of the dye patch. Furthermore, absorbance is linear with concentration.\nTo be continued…"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to iqcampy",
    "section": "",
    "text": "Our lab, the Rijkserfgoedlaboratorium in Amsterdam, recently acquired a light weight, mobile and user friendly Specim IQ hyperspectral camera for the investigation of artworks. This open source Python package iqcampy is developed in out the open to learn together how to read, visualize and interpret the spectral image data for this camera.\nLet’s dive in!"
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting started with Python",
    "section": "",
    "text": "Before you can install and use the iqcampy package you need to prepare your computer by setting up a python environment in which you can execute python code and install additional python packages. It is recommended to do this by downloading (581MB) and installing Anaconda Distribution. For installation instructions on Windows, Mac and Linux see: https://docs.anaconda.com/anaconda/install/\nIncluded are many powerful data science python packages, Jupyter notebooks and the python package manager program pip. You are now ready to install additional packages such as iqcampy."
  },
  {
    "objectID": "getting-started.html#installing-anaconda-distribution",
    "href": "getting-started.html#installing-anaconda-distribution",
    "title": "Getting started with Python",
    "section": "",
    "text": "Before you can install and use the iqcampy package you need to prepare your computer by setting up a python environment in which you can execute python code and install additional python packages. It is recommended to do this by downloading (581MB) and installing Anaconda Distribution. For installation instructions on Windows, Mac and Linux see: https://docs.anaconda.com/anaconda/install/\nIncluded are many powerful data science python packages, Jupyter notebooks and the python package manager program pip. You are now ready to install additional packages such as iqcampy."
  },
  {
    "objectID": "getting-started.html#installing-iqcampy",
    "href": "getting-started.html#installing-iqcampy",
    "title": "Getting started with Python",
    "section": "Installing iqcampy",
    "text": "Installing iqcampy\nTake a look at the Python Package Index at https://pypi.org/ and search for the python package that you need. In our case iqcampy. Open a terminal window (in the Windows start menu called Anaconda Prompt) and type the installation command and press enter:\npip install iqcampy \nThis command starts the python package manager program pip and tells it to fetch the package from the Python Package Index and install on your computer. You are now ready to run the code examples in a Jupyter notebook.\nIf at some point in the future you would like to upgrade iqcampy to a newer version, execute the pip command with the upgrade -U flag:\npip install -U iqcampy"
  },
  {
    "objectID": "getting-started.html#run-a-jupyter-notebook",
    "href": "getting-started.html#run-a-jupyter-notebook",
    "title": "Getting started with Python",
    "section": "Run a Jupyter notebook",
    "text": "Run a Jupyter notebook\nJupyter notebooks are files with the filename extension .ipynb. In the old days they were called interactive python notebooks, hence the extension. You can type and execute python code, and see the results, in these notebooks. Interaction with these notebooks works via a modern web browser such as Firefox or Chrome. I am not sure if other web browsers also work. To create and run a notebook you need to start a Jupyter Notebook server. On windows this is done by clicking on the Jupyter Notebook item in the start menu. Alternatively, you can start a notebook server by typing this command in a terminal:\njupyter notebook\nThe Jupyter Notebook server should open in your browser on the dashboard page. Although we see stuff appearing in the web browser, all processes are happening locally on your computer. Now you can select the folder you want to work in and create a new notebook with the new button."
  },
  {
    "objectID": "getting-started.html#execute-a-code-cell",
    "href": "getting-started.html#execute-a-code-cell",
    "title": "Getting started with Python",
    "section": "Execute a code cell",
    "text": "Execute a code cell\nThe Jupyter ecosystem has expanded rapidly in the last years. I find this a bit confusing. So let’s stick with the classic python Jupyter Notebook for now.\nJupyter notebooks contain two types of cells: code cells and markdown cells. Try by typing 1 + 1 in a code cell. You can execute the code cell by simultaneously pressing Shift and Enter. More information is found in the help menu and on-line: https://jupyter.org/try.\nThat is it! You can now move on to the next sections and try the code examples."
  },
  {
    "objectID": "reading-iqcam-data.html",
    "href": "reading-iqcam-data.html",
    "title": "Reading your IQcam data",
    "section": "",
    "text": "The Specim IQ hyperspectral camera (IQcam) saves its raw and computed data in an open data format. Very nice! The iqcampy package is designed to help you to explore the data. In order to learn about the way the IQcam data is formatted and can be read you can download a demo dataset iqcam_2021-02-03_005_4x-aquarelblauw-FL-01.zip.\nImport the download() and filetree() functions. Running download() will: 1) create a subdirectory downloads/, 2) change our working directory to this folder, 3) download a zip file with a dataset, and 4) extract the contents of the zip file.\nfrom iqcampy import download, filetree\ndata_path = download()\n\nCurrent working directory: \"downloads\"\n(1/2) Found existing zipfile: iqcam_2021-02-03_005_4x-aquarelblauw-FL-01.zip (skipping download)\n(2/2) Extracting zip file...\nReady!\nWe can now explore the complete contents of the dataset with the filetree() function.\nfiletree(data_path)\n\niqcam_2021-02-03_005_4x-aquarelblauw-FL-01/\n├── .validated\n├── capture/\n│   ├── DARKREF_iqcam_2021-02-03_005.hdr\n│   ├── DARKREF_iqcam_2021-02-03_005.raw\n│   ├── WHITEREF_iqcam_2021-02-03_005.hdr\n│   ├── WHITEREF_iqcam_2021-02-03_005.raw\n│   ├── iqcam_2021-02-03_005.hdr\n│   └── iqcam_2021-02-03_005.raw\n├── iqcam_2021-02-03_005.png\n├── manifest.xml\n├── metadata/\n│   └── iqcam_2021-02-03_005.xml\n└── results/\n    ├── REFLECTANCE_iqcam_2021-02-03_005.dat\n    ├── REFLECTANCE_iqcam_2021-02-03_005.hdr\n    ├── REFLECTANCE_iqcam_2021-02-03_005.png\n    ├── RGBBACKGROUND_iqcam_2021-02-03_005.png\n    ├── RGBSCENE_iqcam_2021-02-03_005.png\n    └── RGBVIEWFINDER_iqcam_2021-02-03_005.png\nA closer look at this file tree makes clear that the measured data (in the capture folder) consists three basic datasets: a dark reference, a white reference, and the actual iqcam capture:\nEach dataset consists of .hdr text file with some meta data and a .raw file with the numerical values.\nUse the functions read_darkref(), read_whiteref() and read_capture() to read these ‘raw’ datasets.\nfrom iqcampy import read_darkref, read_whiteref, read_capture, compute_reflectance\ndark_meta, nms, dark_spectrum = read_darkref(data_path)\nwhite_meta, nms, white_spectrum = read_whiteref(data_path)\ncapture_meta, nms, capture_cube = read_capture(data_path)\nThese functions return numpy arrays and additional meta data in the well-known ENVI format for hyper spectral images.\nprint(capture_meta)\n\nENVI\ndescription = {Data recorded with Specim IQ}\nsamples = 512\nlines = 512\nbands = 204\nheader offset = 0\nfile type = ENVI\ndata type = 12\ninterleave = BIL\nsensor type = SPECIM IQ\nbyte order = 0\ndefault bands = {70,53,19}\nlatitude = 0.00000000\nlongitude = 0.00000000\nacquisition date = 03-02-2021\nerrors = none\nbinning = {1,1}\ntint = 98\nfps = 10.2041\nWe can subsequently compute the reflectance spectral data cube with the compute_reflectance() function. Mathematically, the reflectance \\(R\\) is calculated form the absolute intensity \\(I\\) by subtracting the dark reference spectrum \\(D\\) and dividing by the white reference spectrum \\(W\\).\n\\[ R = \\frac{I - D}{W - D} \\]\nreflectance_cube = compute_reflectance(capture_cube, dark_spectrum, white_spectrum)\nThis data cube is consists of a stack of 204 square images of 512 x 512 pixels at 204 wavelength channels.\nreflectance_cube.shape\n\n(512, 512, 204)\nHere are the wavelengths as listed in the ENVI header .hdr file.\n# 204 wavelenghths (nm)\nprint(nms)\n\n[ 397.32  400.2   403.09  405.97  408.85  411.74  414.63  417.52  420.4\n  423.29  426.19  429.08  431.97  434.87  437.76  440.66  443.56  446.45\n  449.35  452.25  455.16  458.06  460.96  463.87  466.77  469.68  472.59\n  475.5   478.41  481.32  484.23  487.14  490.06  492.97  495.89  498.8\n  501.72  504.64  507.56  510.48  513.4   516.33  519.25  522.18  525.1\n  528.03  530.96  533.89  536.82  539.75  542.68  545.62  548.55  551.49\n  554.43  557.36  560.3   563.24  566.18  569.12  572.07  575.01  577.96\n  580.9   583.85  586.8   589.75  592.7   595.65  598.6   601.55  604.51\n  607.46  610.42  613.38  616.34  619.3   622.26  625.22  628.18  631.15\n  634.11  637.08  640.04  643.01  645.98  648.95  651.92  654.89  657.87\n  660.84  663.81  666.79  669.77  672.75  675.73  678.71  681.69  684.67\n  687.65  690.64  693.62  696.61  699.6   702.58  705.57  708.57  711.56\n  714.55  717.54  720.54  723.53  726.53  729.53  732.53  735.53  738.53\n  741.53  744.53  747.54  750.54  753.55  756.56  759.56  762.57  765.58\n  768.6   771.61  774.62  777.64  780.65  783.67  786.68  789.7   792.72\n  795.74  798.77  801.79  804.81  807.84  810.86  813.89  816.92  819.95\n  822.98  826.01  829.04  832.07  835.11  838.14  841.18  844.22  847.25\n  850.29  853.33  856.37  859.42  862.46  865.5   868.55  871.6   874.64\n  877.69  880.74  883.79  886.84  889.9   892.95  896.01  899.06  902.12\n  905.18  908.24  911.3   914.36  917.42  920.48  923.55  926.61  929.68\n  932.74  935.81  938.88  941.95  945.02  948.1   951.17  954.24  957.32\n  960.4   963.47  966.55  969.63  972.71  975.79  978.88  981.96  985.05\n  988.13  991.22  994.31  997.4  1000.49 1003.58]\nA first test to see if we are doing fine is to compute a pseudo RGB image from the default bands = {70,53,19} in the ENVI meta data, and plot the image.\npseudo_rgb = reflectance_cube[:,:, [70, 53, 19]] # red, green, blue\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=[7, 7])\nax.imshow(pseudo_rgb / pseudo_rgb.max()) # avoid clipping \nax.set_title('pseudo RGB');"
  },
  {
    "objectID": "reading-iqcam-data.html#functions",
    "href": "reading-iqcam-data.html#functions",
    "title": "Reading your IQcam data",
    "section": "FUNCTIONS",
    "text": "FUNCTIONS\n\nsource\n\ncompute_reflectance\n\n compute_reflectance (capture_cube, dark_spectrum, white_spectrum)\n\nCompute spectral reflectance cube from raw data.\nReturns: reflectance_cube\n\nsource\n\n\nread_reflectance\n\n read_reflectance (data_path)\n\nRead precomputed computed reflectance header, cube data and rgb image.\nReturns: meta, nms, reflectance_cube, rgb_img\n\nsource\n\n\nread_capture\n\n read_capture (data_path)\n\nRead cube capture header and data.\nReturns: meta, nms, capture_cube\n\nsource\n\n\nread_whiteref\n\n read_whiteref (data_path)\n\nRead WHITEREF header and data.\nReturns: meta, nms, white_spectrum\n\nsource\n\n\nread_darkref\n\n read_darkref (data_path)\n\nRead DARKREF header and data.\nReturns: meta, nms, dark_spectrum\n\nsource\n\n\nfiletree\n\n filetree (data_path, include_files=True, force_absolute_ids=True,\n           show=True)\n\nPrints a file tree with the contents of the data_path folder.\n\nsource\n\n\ndownload\n\n download ()\n\nDownload Specim IQcam demo dataset zipfile and extract its contents."
  }
]